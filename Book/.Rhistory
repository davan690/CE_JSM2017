p_needed <- c("plyr", "dplyr", "caret","e1071","gridExtra","lattice","imputeMissings",
"RANN","corrplot","nnet","car","gpairs","reshape2","psych","tidyr")
packages <- rownames(installed.packages())
p_needed[!(p_needed %in% packages)]
bookdown::render_book("index.Rmd", "bookdown::gitbook")
source("https://raw.githubusercontent.com/happyrabbit/CE_JSM2017/Rcode/00-course-setup.R")
source("https://raw.githubusercontent.com/happyrabbit/CE_JSM2017/master/Rcode/00-course-setup.R")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
devtools::install_github('yihui/xaringan')
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
source("https://raw.githubusercontent.com/happyrabbit/CE_JSM2017/master/Rcode/00-course-setup.R")
sim.dat <- read.csv("https://raw.githubusercontent.com/happyrabbit/DataScientistR/master/Data/SegData.csv ")
library(DataScienceR)
data("sim1_da1")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
load("/Users/happyrabbit/Documents/GitHub/DataScientistR/Data/avnnetTune.RData")
avnnetTune
load("/Users/happyrabbit/Documents/GitHub/DataScientistR/Data/gbmTuneNN.RData")
trainx = dplyr::select(sim1_da1, -y)
trainy = sim1_da1$y
bookdown::render_book("index.Rmd", "bookdown::gitbook")
cat(readLines('segmentdb_ui.csv'), sep = '\n')
cat(readLines('Data/segmentdb_ui.csv'), sep = '\n')
cat(readLines('Data/segmentdb_server.csv'), sep = '\n')
bookdown::render_book("index.Rmd", "bookdown::gitbook")
library(DT)
library(dplyr)
sim.dat<-read.csv("https://raw.githubusercontent.com/happyrabbit/DataScientistR/master/Data/SegData.csv")
# Summarise data
seg<-sim.dat%>%
filter(age < 100)%>%
group_by(segment)%>%
summarise(Age=round(mean(na.omit(age)),0),
FemalePct=round(mean(gender=="Female"),2),
HouseYes=round(mean(house=="Yes"),2),
store_exp=round(mean(na.omit(store_exp),trim=0.1),0),
online_exp=round(mean(online_exp),0),
store_trans=round(mean(store_trans),1),
online_trans=round(mean(online_trans),1))%>%
data.frame()
# show summarized data by interactive table
datatable( seg,
# no row names
rownames = FALSE,
# Assign colomn names for output table
colnames = c('Segment', 'Age', 'Female %', 'House Owner',
'Store $','Online $', 'Store #', 'Online #' ),
# Define table CSS Classes
class = "cell-border stripe",
# Define table caption
caption = 'Table 1: Segment Summary Table',
options = list(
# show the first 4 rows
pageLength = 4,
# Enable automatic column width calculation
autoWidth = TRUE)
)
View(seg)
View(seg)
datatable( seg,
# no row names
rownames = FALSE,
# Assign colomn names for output table
colnames = c('Segment', 'Age', 'Female Pct', 'House Owner',
'Store','Online', 'Store Count', 'Online Count' ),
# Define table CSS Classes
class = "cell-border stripe",
# Define table caption
caption = 'Table 1: Segment Summary Table',
options = list(
# show the first 4 rows
pageLength = 4,
# Enable automatic column width calculation
autoWidth = TRUE)
)
datatable( seg,
# no row names
rownames = FALSE,
# Assign colomn names for output table
colnames = c('Segment', 'Age', 'Female Pct', 'House Owner',
'Store','Online', 'Store Count', 'Online Count' ),
# Define table CSS Classes
class = "cell-border stripe",
# Define table caption
caption = 'Table 1: Segment Summary Table',
options = list(
# show the first 4 rows
pageLength = 4,
# Enable automatic column width calculation
autoWidth = TRUE)
)
bookdown::render_book("index.Rmd", "bookdown::gitbook")
load("https://github.com/happyrabbit/DataScientistR/blob/master/Data/nnetTune.RData")
load("https://github.com/happyrabbit/DataScientistR/blob/master/Data/nnetTune.RData")
load("/Data/gbmTuneNN.RData")
load("Data/gbmTuneNN.RData")
load("Data/gbmTuneNN.RData")
load("Data/nnetTune.RData")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
source("https://raw.githubusercontent.com/happyrabbit/DataScientistR/master/R_Code/multiplot.r")
library(grid)
library(lattice)
library(ggplot2)
source("https://raw.githubusercontent.com/happyrabbit/DataScientistR/master/R_Code/multiplot.r")
# randomly simulate some non-linear samples
x=seq(1,10,0.01)*pi
e=rnorm(length(x),mean=0,sd=0.2)
fx<-sin(x)+e+sqrt(x)
dat=data.frame(x,fx)
# plot fitting result
ggplot(dat,aes(x,fx))+
geom_point() +
geom_smooth(method = "lm", se = FALSE)
p_needed <- c("plyr", "dplyr", "caret","e1071","gridExtra","lattice","imputeMissings",
"RANN","corrplot","nnet","car","gpairs","reshape2","psych","tidyr",
"ggplot2","sparklyr","readr","mvtnorm","MASS","data.table","magrittr",
"shiny","metricsgraphics","DT","leaflet","dygraphs","xts","lubridate",
"highcharter","rbokeh","networkD3","threejs")
packages <- rownames(installed.packages())
p_to_install <- p_needed[!(p_needed %in% packages)]
p_to_install
install.packages("revealjs")
